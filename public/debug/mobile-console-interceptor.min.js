(function () {
	try {
		var u = new URL(location.href),
			d = u.searchParams.get('debug'),
			ls = null;
		try {
			ls = localStorage.getItem('hebrewTrainerDebug');
		} catch (e) {}
		var on = d === 'on' || ls === 'on';
		if (!on) return;
		var WS =
				u.searchParams.get('debugWs') ||
				window.MOBILE_DEBUG_WS ||
				'ws://localhost:3001',
			HT =
				u.searchParams.get('debugHttp') ||
				window.MOBILE_DEBUG_HTTP ||
				'http://localhost:3001/log',
			TOKEN = u.searchParams.get('debugToken') || window.MOBILE_DEBUG_TOKEN;
		console.log('ðŸ”§ Mobile Debug Interceptor Loaded');
		console.log('ðŸ“¡ HTTP Endpoint:', HT);
		console.log('ðŸ”‘ Token:', TOKEN ? 'Provided' : 'Not provided');
		if (TOKEN && HT.indexOf('?') === -1) {
			HT += '?token=' + encodeURIComponent(TOKEN);
		} else if (TOKEN) {
			HT += '&token=' + encodeURIComponent(TOKEN);
		}
		var O = {
			log: console.log,
			warn: console.warn,
			error: console.error,
			info: console.info,
		};
		function V() {
			return {
				width: innerWidth,
				height: innerHeight,
				dpr: devicePixelRatio || 1,
			};
		}
		function B(t, a) {
			return {
				type: t,
				args: [].slice.call(a),
				timestamp: Date.now(),
				device: navigator.userAgent,
				url: location.href,
				viewport: V(),
			};
		}
		var Q = [],
			w = null,
			OK = !1,
			T = !1,
			hT = null;
		function E(p) {
			try {
				Q.push(p);
			} catch (e) {}
			F();
		}
		function F() {
			try {
				if (OK && w && w.readyState === 1) {
					while (Q.length) w.send(JSON.stringify(Q.shift()));
					return;
				}
				if (!hT) {
					hT = setTimeout(function () {
						var b = Q.splice(0, Q.length);
						hT = null;
						if (!b.length) return;
						try {
							var headers = { 'Content-Type': 'application/json' };
							if (TOKEN) {
								headers['Authorization'] = 'Bearer ' + TOKEN;
							}
							fetch(HT, {
								method: 'POST',
								headers: headers,
								body: JSON.stringify(b),
							})
								.then(function (response) {
									if (!response.ok) {
										console.warn(
											'ðŸš¨ Debug log failed:',
											response.status,
											response.statusText
										);
									}
								})
								.catch(function (error) {
									console.warn('ðŸš¨ Debug log error:', error);
								});
						} catch (e) {
							console.warn('ðŸš¨ Debug log exception:', e);
						}
					}, 400);
				}
			} catch (e) {}
		}
		function C() {
			if (T) return;
			T = !0;
			try {
				var wsUrl = WS.replace(/^http/, 'ws').replace(/^https/, 'wss');
				if (TOKEN) {
					wsUrl +=
						(wsUrl.indexOf('?') === -1 ? '?' : '&') +
						'token=' +
						encodeURIComponent(TOKEN);
				}
				w = new WebSocket(wsUrl);
				w.onopen = function () {
					OK = !0;
					E({
						type: 'info',
						args: ['ðŸŸ¢ Connected', new Date().toISOString()],
						timestamp: Date.now(),
						device: navigator.userAgent,
						url: location.href,
						viewport: V(),
					});
					F();
				};
				w.onclose = function () {
					OK = !1;
				};
				w.onerror = function () {
					OK = !1;
				};
				w.onmessage = function () {};
			} catch (e) {
				OK = !1;
			}
		}
		console.log = function () {
			try {
				E(B('log', arguments));
			} catch (e) {}
			O.log.apply(console, arguments);
		};
		console.warn = function () {
			try {
				E(B('warn', arguments));
			} catch (e) {}
			O.warn.apply(console, arguments);
		};
		console.error = function () {
			try {
				E(B('error', arguments));
			} catch (e) {}
			O.error.apply(console, arguments);
		};
		console.info = function () {
			try {
				E(B('info', arguments));
			} catch (e) {}
			O.info.apply(console, arguments);
		};
		addEventListener('error', function (e) {
			try {
				E({
					type: 'error',
					args: [String(e.error || e.message || 'Unknown error')],
					timestamp: Date.now(),
					device: navigator.userAgent,
					url: location.href,
					viewport: V(),
				});
			} catch (_) {}
		});
		addEventListener('unhandledrejection', function (e) {
			try {
				E({
					type: 'error',
					args: ['UnhandledRejection', String(e.reason)],
					timestamp: Date.now(),
					device: navigator.userAgent,
					url: location.href,
					viewport: V(),
				});
			} catch (_) {}
		});
		var lt = 0;
		addEventListener(
			'touchstart',
			function (e) {
				var t = Date.now();
				if (t - lt < 300) return;
				lt = t;
				var c = (e.touches && e.touches[0]) || {},
					tg = (e.target && e.target.tagName) || 'UNKNOWN';
				E({
					type: 'touch',
					args: [
						{
							touches: e.touches ? e.touches.length : 0,
							clientX: c.clientX,
							clientY: c.clientY,
							target: tg,
						},
					],
					timestamp: t,
					device: navigator.userAgent,
					url: location.href,
					viewport: V(),
				});
			},
			{ passive: true }
		);
		E({
			type: 'info',
			args: ['ðŸ“± Device', navigator.userAgent],
			timestamp: Date.now(),
			device: navigator.userAgent,
			url: location.href,
			viewport: V(),
		});
		C();
	} catch (e) {
		try {
			console.warn('mobile-console-interceptor init failed:', e);
		} catch (_) {}
	}
})();
